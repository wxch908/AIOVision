<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--引用图标-->
    <FontFamily x:Key="iconfont">
        pack://application:,,,/AIOVision;component/IconStyle/#iconfont
    </FontFamily>

    <Style TargetType="Border" x:Key="borderStyle">
        <Setter Property="Background">
            <Setter.Value>
                <!--<LinearGradientBrush EndPoint="1.002,0.498" StartPoint="-0.024,0.502">
                    <GradientStop Color="#00796B" Offset="0.0"/>
                    <GradientStop Color="#066A5F" Offset="0.25"/>
                    <GradientStop Color="#09655B" Offset="0.5"/>
                    <GradientStop Color="#0C5D54" Offset="0.75"/>
                    <GradientStop Color="#124F48" Offset="1.0"/>
                </LinearGradientBrush>-->
                <SolidColorBrush Color="{StaticResource MaterialDesignShadow}"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--TitleFrm控件式样-->
    <Style TargetType="Button" x:Key="WindowHeaderBtnStyle">

        <Setter Property="Foreground" Value="White"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent" Name="back">
                        <TextBlock Text="{Binding Content,RelativeSource={RelativeSource AncestorType=Button,Mode=FindAncestor}}" 
                                   VerticalAlignment="Center" HorizontalAlignment="Center"          
                                   FontFamily="{StaticResource iconfont}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="back" Property="Background" Value="#22FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="back" Property="Background" Value="#44FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Nav_Btn控件式样-->
    <Style x:Key="Nav_Btn" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="44"/>
        <Setter Property="Height" Value="44"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="#00CC99"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Btn控件式样,图像预处理-->
    <Style x:Key="Nav_Btn1" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Nav_Main_Btn控件式样-->
    <Style x:Key="Nav_Main_Btn" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--项目添加/删除 控件式样-->
    <Style x:Key="Add_Btn" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="#99CCCC"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="LabelStyel" TargetType="Label">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
    </Style>
    
   
    <!--列表控件式样-->
    <Style x:Key="Struck" TargetType="StackPanel">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--列表控件式样-->
    <Style x:Key="Txt_block" TargetType="TextBlock">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ToolButton式样-->
    <Style TargetType="Button" x:Key="WindowToolBtnStyle">
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="#222021"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#22FFFFFF"-->

    <!--带圆弧角的Button按钮-->
    <ControlTemplate TargetType="Button" x:Key="BtnTempRadius">
        <Border Name="UpBorder" Style="{StaticResource borderStyle}" CornerRadius="4">
            <Grid>
                <Border Background="#22FFFFFF" Name="back" Visibility="Hidden"/>
                <ContentControl  
                    Content="{TemplateBinding Content}" 
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center"
                    Foreground="{TemplateBinding Foreground}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="back" Property="Visibility" Value="Visible"/>
                <Setter TargetName="back" Property="Background" Value="#124F48"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="UpBorder" Property="Background" Value="#44FFFFFF"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Header控件式样-->
    <Style TargetType="Button" x:Key="BtnTempRound">
        <Setter Property="Foreground" Value="#11554F"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent" Name="back">
                        <TextBlock 
                            Name="txt_font"
                            Text="{Binding Content,RelativeSource={RelativeSource AncestorType=Button,Mode=FindAncestor}}" 
                                   VerticalAlignment="Center" HorizontalAlignment="Center"          
                                   FontFamily="{StaticResource iconfont}" FontSize="36"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="back" Property="Background" Value="#22FFFFFF"/>
                            <Setter TargetName="txt_font" Property="FontSize" Value="38"/>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="back" Property="Background" Value="#44FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--链接按钮控件式样-->
    <Style x:Key="DataLinkBtnStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="48"/>
        <Setter Property="Height" Value="48"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontFamily" Value="{StaticResource iconfont}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TextBox样式样-->
    <Style x:Key="Test_TextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Width="Auto" Height="Auto" BorderThickness="1" BorderBrush="#FF7F9DB9">
                        <Grid x:Name="grid" Background="#FFFFFF">
                            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DatagridStyle-->
    <Style x:Key="DatagridStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DatagridRowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Grid 
                                x:Name="DGR_Border"                     
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                        <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="#00Bcd4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DatagridHead" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="White"/>
    </Style>

    <Style TargetType="{x:Type ListBox}" >
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <WrapPanel Width="auto" Orientation="Horizontal" IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Height="100" Margin="0" Width="auto" ItemHeight="100" ItemWidth="60" VerticalAlignment="Top" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>-->
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="materialDesign:PackIconKind" >

                    <StackPanel Margin="3" Orientation="Horizontal">
                        <Image  Source="{Binding IconImage}"  Width="24" Height="24" VerticalAlignment="Center" HorizontalAlignment="Center"    />
                        <TextBlock Margin="0,3,0,0" TextWrapping="Wrap" Text="{Binding Name }" FontSize="13" Foreground="Black"  TextTrimming="CharacterEllipsis" HorizontalAlignment="Center" />
                    </StackPanel>

                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabItem-->
    <SolidColorBrush x:Key="PrimaryBlueColor" Color="#348EF6"/>

    <SolidColorBrush x:Key="SecundaryBlueColor" Color="#EFF2FF"/>

    <SolidColorBrush x:Key="PrimaryTextColor" Color="#FFFFFF"/>

    <SolidColorBrush x:Key="SecundaryTextColor" Color="#BBC1D1"/>

    <SolidColorBrush x:Key="PrimaryGrayColor" Color="#BBC1D1"/>

    <!--TabItem,Style-->
    <Style x:Key="TabItemStyle" TargetType="TabItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SecundaryTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>

        <Setter Property="Width" Value="66"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="FontSize" Value="13"/>
        <!--<Setter Property="Padding" Value="10 10"/>
        <Setter Property="FontWeight" Value="500"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid SnapsToDevicePixels="True">
                        <Border CornerRadius="0"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Margin="{TemplateBinding Margin}">
                            <ContentPresenter 
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                SnapsToDevicePixels="True"
                                RecognizesAccessKey="True"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="Header"
                                Focusable="False"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource SecundaryBlueColor}"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryGrayColor}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#11554F"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TabControl,Style-->
    <Style x:Key="TabControlStyle" TargetType="TabControl">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Grid.Row="0"
                                  Background="Transparent"
                                  IsItemsHost="True"
                                  HorizontalAlignment="Left"/>
                        <Border Grid.Row="1"
                                CornerRadius="5"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <ContentPresenter ContentSource="SelectedContent"
                                              SnapsToDevicePixels="True"
                                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComBoBox项选中背景色-->
    <SolidColorBrush x:Key="ComboBoxSelectdBackground" Color="Gray"/>
    <!--ComBoBox项鼠标经过背景色-->
    <SolidColorBrush x:Key="ComboBoxMouseOverBackground" Color="#ff3030"/>
    <!--ComBoBox项选中前景色-->
    <SolidColorBrush x:Key="ComboBoxSelectedForeground" Color="White"/>
    <!--ComBoBox项鼠标经过前景色-->
    <SolidColorBrush x:Key="ComboBoxMouseOverForegrond" Color="White"/>
    <!--右侧倒三角样-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Height="25">
            <Border Grid.Column="1" Background="White" Opacity="0" Cursor="Hand"/>
            <Path x:Name="Arrow" Grid.Column="1" Data="M 0 0 6 6 12 0 Z" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" Fill="#11554F" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform CenterX="6" CenterY="3" Angle="180"></RotateTransform>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Arrow" Property="Margin" Value="0 0 0 2"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Height" Value="28"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate  TargetType="{x:Type ComboBoxItem}">
                                <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                    <Border x:Name="_borderbg" Background="Transparent"/>
                                    <TextBlock Margin="3 0 3 0" VerticalAlignment="Center" x:Name="_txt" Foreground="#333" Text="{Binding Content,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Border x:Name="_border" Background="White" Opacity="0"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="_borderbg" Property="Background" Value="{StaticResource ComboBoxSelectdBackground}" />
                                        <Setter TargetName="_txt" Property="Foreground" Value="{StaticResource ComboBoxSelectedForeground}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsSelected" Value="false"/>
                                            <Condition Property="IsMouseOver" Value="true"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="_borderbg" Property="Background" Value="{StaticResource ComboBoxMouseOverBackground}" />
                                        <Setter TargetName="_txt" Property="Foreground" Value="{StaticResource ComboBoxMouseOverForegrond}"/>
                                    </MultiTrigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="0.7*"/>
                            <ColumnDefinition Width="0.3*" MaxWidth="30"/>
                        </Grid.ColumnDefinitions>
                        <Border  Grid.Column="0" Grid.ColumnSpan="2" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1,0,0,1"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,0,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!--ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen-->
                        <ToggleButton 
                                Grid.Column="1" 
                                Grid.ColumnSpan="2"  
                                Template="{StaticResource ComboBoxToggleButton}"
                                x:Name="ToggleButton" Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press"/>

                        <!--必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它-->
                        <TextBox   
                                Visibility="Hidden" 
                                BorderThickness="0"   
                                Margin="2 0 0 0" 
                                x:Name="PART_EditableTextBox"  
                                VerticalAlignment="Center" 
                                Focusable="True" 
                                Background="Transparent" 
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!--Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen-->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" StaysOpen="False">
                            <Grid MaxHeight="150" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"  BorderBrush="#11554F" BorderThickness="1 0 1 1"/>
                                <ScrollViewer Margin="1"  SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                    <!--StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True-->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>